{"version":3,"file":"js/about.7a0d2bee.js","mappings":"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","sources":["webpack://tsf/./src/views/AboutView.vue","webpack://tsf/./src/views/AboutView.vue?d56f","webpack://tsf/./src/views/ten.vue","webpack://tsf/./src/views/ten.vue?a35a"],"sourcesContent":["<!-- https://velog.io/@hgoguma_124/Vue.js-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%97%86%EC%9D%B4-Drag-Drop-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0 -->\r\n<template>\r\n  <form action=\"\">\r\n    <div class=\"container\">\r\n      <div\r\n        class=\"file-upload-container\"\r\n        @dragenter=\"onDragenter\"\r\n        @dragover=\"onDragover\"\r\n        @dragleave=\"onDragleave\"\r\n        @drop=\"onDrop\"\r\n        @click=\"onClick\"\r\n      >\r\n        <div class=\"file-upload\" :class=\"isDragged ? 'dragged' : ''\">\r\n          사진이나 이미지 파일을 드래그 & 드랍\r\n        </div>\r\n      </div>\r\n      <!-- 파일 업로드 -->\r\n      <input\r\n        type=\"file\"\r\n        ref=\"fileInput\"\r\n        class=\"file-upload-input\"\r\n        @change=\"onFileChange\"\r\n        multiple\r\n      />\r\n      <!-- 업로드된 리스트 -->\r\n      <div class=\"file-upload-list\">\r\n        <div\r\n          class=\"file-upload-list__item\"\r\n          v-for=\"(file, index) in fileList\"\r\n          :key=\"index\"\r\n        >\r\n          <div class=\"file-upload-list__item__data\">\r\n            <img\r\n              class=\"file-upload-list__item__data-thumbnail\"\r\n              v-bind:id=\"file.name\"\r\n              :src=\"file.src\"\r\n            />\r\n            <div\r\n              class=\"file-upload-list__item__data-name\"\r\n              v-bind:id=\"0 + file.name\"\r\n            >\r\n              <!-- {{ file.name }} -->\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"file-upload-list__item__btn-remove\"\r\n            @click=\"mobileNet(file.name)\"\r\n          >\r\n            분석\r\n          </div>\r\n          <div\r\n            class=\"file-upload-list__item__btn-remove\"\r\n            @click=\"handleRemove(index)\"\r\n          >\r\n            삭제\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\nexport default {\r\n  name: \"app\",\r\n  created() {\r\n    // 번역된 prediction을 제자리로 뿌려줌\r\n    this.$socket.on(\"translate\", (msg) => {\r\n      // 받은 자료의 형태가 \"파일이름(=id)/번역된 prediction\" 그래서 split(\"/\")으로 스트링을 나눔\r\n      const massages = msg.split(\"/\");\r\n      // 파일이름으로 된 id를 찾아 번역된 prediction을 삽입\r\n      const prediction = document.getElementById(0 + massages[0]);\r\n      prediction.innerHTML = massages[1];\r\n\r\n      // base64 확인 테스트 중..\r\n      // console.log(massages);\r\n      // const img = document.getElementById(massages[0]);\r\n      // console.log(img.src);\r\n    });\r\n  },\r\n  data() {\r\n    return {\r\n      fileList: [],\r\n      PredictionsList: [],\r\n    };\r\n  },\r\n  methods: {\r\n    onClick() {\r\n      this.$refs.fileInput.click();\r\n    },\r\n    onDragenter() {\r\n      // class 넣기\r\n      this.isDragged = true;\r\n    },\r\n    onDragleave() {\r\n      // class 삭제\r\n      this.isDragged = false;\r\n    },\r\n    onDragover(event) {\r\n      // 드롭을 허용하도록 prevetDefault() 호출\r\n      event.preventDefault();\r\n    },\r\n    onDrop(event) {\r\n      // 기본 액션을 막음 (링크 열기같은 것들)\r\n      event.preventDefault();\r\n      this.isDragged = false;\r\n      const files = event.dataTransfer.files;\r\n      this.addFiles(files);\r\n    },\r\n    onFileChange(event) {\r\n      const files = event.target.files;\r\n      this.addFiles(files);\r\n    },\r\n    // 업로드 된 파일 리스트 생성\r\n    async addFiles(files) {\r\n      for (let i = 0; i < files.length; i++) {\r\n        const src = await this.readFiles(files[i]);\r\n        files[i].src = src;\r\n        console.log(files[i]);\r\n        // files[i] 형태를 확인\r\n        this.fileList.push(files[i]);\r\n        this.$socket.emit(\"src\", files[i].src);\r\n        // 소켓으로 src 전송\r\n      }\r\n    },\r\n    // FileReader를 통해 파일을 읽어 thumbnail 영역의 src 값으로 셋팅\r\n    async readFiles(files) {\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          resolve(e.target.result);\r\n        };\r\n        reader.readAsDataURL(files);\r\n      });\r\n    },\r\n    handleRemove(index) {\r\n      this.fileList.splice(index, 1);\r\n    },\r\n    // 분석 시작\r\n    mobileNet(file) {\r\n      const image = document.getElementById(file);\r\n      // 이미지가 담긴 img를 불러옴\r\n      // img로 분석 시작\r\n      mobilenet.load().then((model) => {\r\n        model.classify(image).then((predictions) => {\r\n          // 번역을 위해 prediction을 소켓으로 전송\r\n          this.$socket.emit(\r\n            \"translate\",\r\n            file +\r\n              \"/\" +\r\n              predictions[0].className +\r\n              \":\" +\r\n              (predictions[0].probability * 100).toFixed(2) +\r\n              \"%<br>\" +\r\n              predictions[1].className +\r\n              \":\" +\r\n              (predictions[1].probability * 100).toFixed(2) +\r\n              \"%<br>\" +\r\n              predictions[2].className +\r\n              \":\" +\r\n              (predictions[2].probability * 100).toFixed(2) +\r\n              \"%\"\r\n            // 번역된 prediction이 제자리에 뿌려지려면\r\n            // 보내는 데이터에 id를 특징할 수 있는 내용도 함께 전송\r\n          );\r\n        });\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.container {\r\n  min-height: 300px;\r\n  width: 500px;\r\n  margin: 0 auto;\r\n}\r\n.file-upload {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: transparent;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  &.dragged {\r\n    border: 1px dashed powderblue;\r\n    opacity: 0.6;\r\n  }\r\n  &-container {\r\n    height: 300px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    box-shadow: 0 0.625rem 1.25rem #0000001a;\r\n    border-radius: 20px;\r\n  }\r\n  &-input {\r\n    display: none;\r\n  }\r\n  &-list {\r\n    margin-top: 10px;\r\n    width: 100%;\r\n    &__item {\r\n      padding: 10px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      &__data {\r\n        display: flex;\r\n        align-items: center;\r\n        &-thumbnail {\r\n          margin-right: 10px;\r\n          border-radius: 20px;\r\n          width: 120px;\r\n          height: 120px;\r\n        }\r\n      }\r\n      &__btn-remove {\r\n        cursor: pointer;\r\n        border: 1px solid powderblue;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        padding: 5px;\r\n        border-radius: 6px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>","import { render } from \"./AboutView.vue?vue&type=template&id=14f20c13\"\nimport script from \"./AboutView.vue?vue&type=script&lang=js\"\nexport * from \"./AboutView.vue?vue&type=script&lang=js\"\n\nimport \"./AboutView.vue?vue&type=style&index=0&id=14f20c13&lang=scss\"\n\nimport exportComponent from \"C:\\\\Users\\\\ds\\\\Desktop\\\\TsFPj\\\\tsf\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div>아버지와 아들의 키를 담은 엑셀파일을 넣어주세요.</div>\r\n  <br />\r\n  <div>\r\n    <input type=\"file\" @change=\"readExcel\" /><button\r\n      id=\"modeling-button\"\r\n      @click=\"modeling()\"\r\n    >\r\n      분석시작\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import { response } from \"express\";\r\n\r\n/* eslint-disable */\r\nexport default {\r\n  name: \"app\",\r\n  data() {\r\n    return {\r\n      father_height: [],\r\n      son_height: [],\r\n    };\r\n  },\r\n  methods: {\r\n    async readExcel(event) {\r\n      console.log(event);\r\n      let input = event.target; // target?\r\n      let reader = new FileReader(); // FileReader??\r\n      let father_height_dum = [];\r\n      let son_height_dum = [];\r\n      reader.onload = function (_) {\r\n        // onload?\r\n        let data = reader.result;\r\n        let wordBook = XLSX.read(data, { type: \"binary\" }); // ???\r\n        const x = wordBook.Sheets.train; // 엑셀의 sheet를 정한다\r\n        for (let j = 2; j < 757; j++) {\r\n          father_height_dum.push(x[\"A\" + j].v);\r\n          son_height_dum.push(x[\"B\" + j].v);\r\n        }\r\n      };\r\n      reader.readAsBinaryString(input.files[0]);\r\n      this.father_height = father_height_dum;\r\n      this.son_height = son_height_dum;\r\n      // ???\r\n    },\r\n    modeling(_) {\r\n      console.log(this.father_height);\r\n      let xt = tf.tensor(this.father_height); // 이게 의미하는 게 뭘까.. 굳이 tf.tensor로 만드는 이유는?\r\n      let yt = tf.tensor(this.son_height);\r\n\r\n      // 모델의 모양을 만들기\r\n      let X = tf.input({ shape: [1] }); // 값 하나 들어옴\r\n      let Y1 = tf.layers.dense({ units: 10, activation: \"relu\" }).apply(X); // apply를 통해 연결\r\n      let Y2 = tf.layers.dense({ units: 10, activation: \"relu\" }).apply(Y1);\r\n      let Z = tf.layers.dense({ units: 1 }).apply(Y2);\r\n      let model = tf.model({ inputs: X, outputs: Z }); // 인아웃풋 저장\r\n      tfvis.show.modelSummary({ name: \"Model Summary\" }, model);\r\n      let compileParam = {\r\n        optimizer: tf.train.adam(), // train ??\r\n        loss: tf.losses.meanSquaredError,\r\n      }; // 최적화의 loss 측정방법종류\r\n      model.compile(compileParam); // 컴파일\r\n      const fitParm = {\r\n        epochs: 200,\r\n        // callbacks: {\r\n        //   onEpochEnd: function (epoch, logs) {\r\n        //     console.log(\"epoch\", epoch, logs, \"RMSE=>\", Math.sqrt(logs.loss));\r\n        //     // RMSE는 뭐임? sprt는 뭐임?\r\n        //   },\r\n        // },\r\n        callbacks: tfvis.show.fitCallbacks(\r\n          { name: \"Training Performance\" },\r\n          [\"loss\", \"mse\"],\r\n          { height: 200, callbacks: [\"onEpochEnd\"] }\r\n        ),\r\n      };\r\n      // const my = tf.tensor([32]);\r\n      model.fit(xt, yt, fitParm).then((_) => {\r\n        // model.fit(xt, yt, fitParm) => 데이터와 모델을 통해 모델링을 한다. => 그리고 거기서 나온 식으로\r\n        let result = model.predict(xt);\r\n        // model.predict(my) => 특정 값의 예상값을 뽑아낼 수 있다.\r\n        result.print();\r\n        // model.save(\"downloads://my-model\"); // 모델을 저장\r\n        model.save(\"localstorage://my-model-1\");\r\n        console.log(\"모델 저장됨\");\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>","import { render } from \"./ten.vue?vue&type=template&id=7701adec\"\nimport script from \"./ten.vue?vue&type=script&lang=js\"\nexport * from \"./ten.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\ds\\\\Desktop\\\\TsFPj\\\\tsf\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["action","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onDragenter","$options","onDragover","onDragleave","onDrop","onClick","_ctx","type","ref","onChange","multiple","_hoisted_3","_Fragment","$data","file","index","key","_hoisted_4","id","name","src","created","this","$socket","on","msg","massages","split","prediction","document","getElementById","innerHTML","data","fileList","PredictionsList","methods","$refs","fileInput","click","isDragged","event","preventDefault","files","dataTransfer","addFiles","onFileChange","target","async","i","length","readFiles","console","log","push","emit","Promise","resolve","reader","FileReader","onload","e","result","readAsDataURL","handleRemove","splice","mobileNet","image","mobilenet","load","then","model","classify","predictions","className","probability","toFixed","__exports__","render","father_height","son_height","input","father_height_dum","son_height_dum","_","wordBook","XLSX","read","x","Sheets","train","j","v","readAsBinaryString","modeling","xt","tf","tensor","yt","X","shape","Y1","layers","dense","units","activation","apply","Y2","Z","inputs","outputs","tfvis","show","modelSummary","compileParam","optimizer","adam","loss","losses","meanSquaredError","compile","fitParm","epochs","callbacks","fitCallbacks","height","fit","predict","print","save"],"sourceRoot":""}